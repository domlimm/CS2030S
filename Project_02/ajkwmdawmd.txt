if (prevE.getCustomer().getCustomerID() == 9 || prevE.getCustomer().getCustomerID() == 10) {
// System.out.printf("%c - %c\n", prevE.getEventType(), tempPair.second().getEventType());
// System.out.printf("%c %.3f - %c %.3f\n", prevE.getEventType(), prevE.getEventTime(), tempPair.second().getEventType(), tempPair.second().getEventTime());
}

//ARRIVE
/*System.out.println("AE: " + shop.getServers().stream()
.map(x -> x.getIdentifier() + " " +
x.getAvailability() + " " + x.getAvailableTime() +
" " + x.customerQueueSize())
.collect(Collectors.toList()));*/

// If selfCO server is done and has no one else in its queue,
// check shared queue in Shop, if there's anyone not served yet.
// If there is, pull customer from shared queue and Serve,
// also remove Customer that is waiting for another selfCO from
// the selfCO customer queue. Remove CWE in SNE too.

// [ID, available, nextAvailableTime, qSize, selfCheckout]
// if (customer.getCustomerID() >= 15) {
//     System.out.println("ArriveE: " + shop.getServers().stream()
//     .map(x -> x.getIdentifier() + " " +
//             x.getAvailability() + " " + x.getAvailableTime() +
//             " " + x.customerQueueSize() + " " + x.isSelfCheckout())
//     .collect(Collectors.toList()));
// }

            // if (customer.getCustomerID() >= 12) {
            //     System.out.println("AE: " + shop.getServers().stream()
            //     .map(x -> x.getIdentifier() + " " +
            //     x.getAvailability() + " " + x.getAvailableTime() +
            //     " " + x.customerQueueSize() + " " + x.isSelfCheckout())
            //     .collect(java.util.stream.Collectors.toList()));                
            // }